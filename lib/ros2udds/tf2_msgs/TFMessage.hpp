// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


/*! 
 * @file TransformStamped.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */
#ifndef _TF2_MSGS_TF_MESSAGE_HPP_
#define _TF2_MSGS_TF_MESSAGE_HPP_

#include "../topic.hpp"

#include "../geometry_msgs/TransformStamped.hpp"

namespace tf2_msgs {

class TFMessage : public ros2udds::Topic<TFMessage>
{
    public:
        uint32_t transforms_length;
        geometry_msgs::TransformStamped transforms;

    TFMessage():
    Topic("tf2_msgs::msg::dds_::TFMessage_","TFMessage", TF2_MSGS_TFMESSAGE_ID),
    transforms_length(1)
    {}

    bool serialize(ucdrBuffer *msg_buf, const TFMessage *topic)
    {
        ucdrBuffer *writer = (ucdrBuffer *)msg_buf;
        (void)ucdr_serialize_uint32_t(writer, topic->transforms_length);
        (void)transforms.serialize(writer, &topic->transforms);

        return !writer->error;
    }

    bool deserialize(ucdrBuffer *msg_buf, TFMessage *topic)
    {
        ucdrBuffer *reader = (ucdrBuffer *)msg_buf;
        (void)ucdr_deserialize_uint32_t(reader, &topic->transforms_length);
        (void)transforms.deserialize(reader, &topic->transforms);

        return !reader->error;
    }

    uint32_t size_of_topic(const TFMessage *topic, uint32_t size)
    {
        uint32_t previousSize = size;
        size += ucdr_alignment(size, 4) + 4;
        size += transforms.size_of_topic(&topic->transforms, size);

        return size - previousSize;
    }
};

} // namespace tf2_msgs

#endif